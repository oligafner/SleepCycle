using Toybox.WatchUi;
using Toybox.Time.Gregorian;
using Toybox.System;
using Toybox.Application.Storage;

class SleepCycleSetTimerDelegate extends WatchUi.BehaviorDelegate {
    var myPicker;
    var defaultValue;
    var hours;
    var mins;

    function initialize() {
        BehaviorDelegate.initialize();
        System.println("Set timer Delegate initialized");
    }

    function onSelect() {
    	System.println("Select pressed");
    	//If the App is started the first time we get the time we have now and set it as the default value
    	//Else we use the time that was set the last time
    	if(Storage.getValue("set_time") == null){
    		System.println("set_time is null");
    		hours = System.getClockTime().hour.toLong();
    		mins = System.getClockTime().min.toLong();
    		defaultValue = Gregorian.duration({:hours=>hours, :minutes=>mins, :seconds=>0});
    	} else {
    		System.println("set_time is set");
    		hours = Storage.getValue("timer_hoursOfDay");
        	mins = Storage.getValue("timer_minutesOfDay");
    		defaultValue = Gregorian.duration({:hours=>hours, :minutes=>mins, :seconds=>0});
    	}
    	//Starts the number picker
        if (WatchUi has :NumberPicker) {
            	myPicker = new WatchUi.NumberPicker(
                WatchUi.NUMBER_PICKER_TIME_OF_DAY,
                defaultValue
            );
            WatchUi.pushView(
                myPicker,
                new SleepCycleSetTimerNumberPickerDelegate(),
                WatchUi.SLIDE_IMMEDIATE
            );
        }
        return true;
    }
}